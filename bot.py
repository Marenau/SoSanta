import telebot
import sqlite3
import random
import os
from config import BOT_TOKEN, DATABASE, ADMIN_PASSWORD
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from mistralai import Mistral

bot = telebot.TeleBot(BOT_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS participants (
            id INTEGER PRIMARY KEY,
            user_id INTEGER UNIQUE,
            first_name TEXT,
            last_name TEXT,
            wish TEXT
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS assignments (
            giver_id INTEGER,
            receiver_id INTEGER,
            FOREIGN KEY (giver_id) REFERENCES participants (user_id),
            FOREIGN KEY (receiver_id) REFERENCES participants (user_id)
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS admins (
            user_id INTEGER PRIMARY KEY
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS game_status (
            status TEXT
        )
    ''')
    cursor.execute('INSERT OR IGNORE INTO game_status (status) VALUES ("not_started")')
    conn.commit()
    conn.close()

init_db()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
admin_states = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
game_started = False

@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ', callback_data='join'))
    markup.add(InlineKeyboardButton('–ü–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É', callback_data='leave'))
    markup.add(InlineKeyboardButton('–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', callback_data='list'))
    markup.add(InlineKeyboardButton('–ö–∏–Ω—É—Ç—å —Å–Ω–µ–∂–∫–æ–º', callback_data='snowball'))
    markup.add(InlineKeyboardButton('–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data='profile'))
    markup.add(InlineKeyboardButton('–ù–æ–≤–æ–≥–æ–¥–Ω–∏–π —Ä–∞—Å—Å–∫–∞–∑', callback_data='story'))
    bot.reply_to(message, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ "–¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞"! üéÖ', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    print(f"Callback from user ID: {call.from_user.id}")
    if call.data == 'join':
        join(call)
    elif call.data == 'leave':
        leave(call)
    elif call.data == 'list':
        list_participants(call)
    elif call.data == 'admin':
        admin_login(call)
    elif call.data == 'snowball':
        throw_snowball(call)
    elif call.data.startswith('snowball_'):
        target_user_id = call.data.split('_')[1]
        throw_snowball_to_user(call, target_user_id)
    elif call.data == 'change_wish':
        change_wish(call)
    elif call.data == 'start_game':
        start_game(call)
    elif call.data == 'clear':
        clear_participants(call)
    elif call.data == 'profile':
        show_profile(call)
    elif call.data == 'story':
        generate_story(call)

def join(call):
    user_id = call.from_user.id
    first_name = call.from_user.first_name
    last_name = call.from_user.last_name
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute('INSERT OR IGNORE INTO participants (user_id, first_name, last_name) VALUES (?, ?, ?)', (user_id, first_name, last_name))
    conn.commit()
    conn.close()

    bot.send_message(call.message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ (–ø–æ–¥–∞—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ):')
    user_states[user_id] = 'waiting_for_wish'

@bot.message_handler(func=lambda call: user_states.get(call.from_user.id) == 'waiting_for_wish')
def save_wish(call):
    user_id = call.from_user.id
    wish = call.text
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute('UPDATE participants SET wish = ? WHERE user_id = ?', (wish, user_id))
    conn.commit()
    conn.close()
    bot.reply_to(call, '–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ "–¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞"! üéâ')
    notify_all_participants(f'{call.from_user.first_name} {call.from_user.last_name if call.from_user.last_name else ""} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ! üéÖ')
    user_states[user_id] = None

def leave(call):
    user_id = call.from_user.id
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute('DELETE FROM participants WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()
    bot.reply_to(call.message, '–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∏–≥—Ä—É "–¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞". üòû')

def admin_login(call):
    user_id = call.from_user.id
    admin_states[user_id] = 'waiting_for_password'
    bot.reply_to(call.message, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: üîí')

@bot.message_handler(func=lambda call: admin_states.get(call.from_user.id) == 'waiting_for_password')
def check_admin_password(call):
    user_id = call.from_user.id
    if call.text == ADMIN_PASSWORD:
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        cursor.execute('INSERT OR IGNORE INTO admins (user_id) VALUES (?)', (user_id,))
        conn.commit()
        conn.close()
        admin_states[user_id] = 'admin_logged_in'
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton('–ù–∞—á–∞—Ç—å –∏–≥—Ä—É', callback_data='start_game'))
        markup.add(InlineKeyboardButton('–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', callback_data='list'))
        markup.add(InlineKeyboardButton('–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', callback_data='clear'))
        bot.reply_to(call, '–í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. üëë', reply_markup=markup)
    else:
        admin_states[user_id] = None
        bot.reply_to(call, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. ‚ùå')

def start_game(call):
    global game_started
    user_id = call.from_user.id
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute('SELECT user_id FROM admins WHERE user_id = ?', (user_id,))
    admin = cursor.fetchone()
    if not admin:
        bot.reply_to(call.message, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. üö´')
        return

    cursor.execute('SELECT user_id, first_name, last_name, wish FROM participants')
    participants = cursor.fetchall()
    if len(participants) < 3:
        bot.reply_to(call.message, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã. üòï')
        return

    participants = [(row[0], row[1], row[2], row[3]) for row in participants]
    random.shuffle(participants)
    assignments = []
    for i in range(len(participants)):
        giver = participants[i]
        receiver = participants[(i + 1) % len(participants)]
        assignments.append((giver[0], receiver[0]))

    cursor.execute('DELETE FROM assignments')
    cursor.executemany('INSERT INTO assignments (giver_id, receiver_id) VALUES (?, ?)', assignments)
    cursor.execute('UPDATE game_status SET status = "started"')
    conn.commit()

    for giver, receiver in assignments:
        cursor.execute('SELECT first_name, last_name, wish FROM participants WHERE user_id = ?', (receiver,))
        receiver_info = cursor.fetchone()
        if receiver_info:
            receiver_full_name = f'{receiver_info[0]} {receiver_info[1]}'
            wish = receiver_info[2] if receiver_info[2] else '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
            bot.send_message(giver, f'–í—ã –¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞ –¥–ª—è {receiver_full_name}! üéÖ\n–ü–æ–∂–µ–ª–∞–Ω–∏–µ: {wish}')

    conn.close()
    game_started = True
    bot.reply_to(call.message, '–ò–≥—Ä–∞ "–¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞" –Ω–∞—á–∞–ª–∞—Å—å! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–æ–º—É –≤—ã –¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞. üéÅ')

def list_participants(call):
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute('SELECT first_name, last_name FROM participants')
    participants = cursor.fetchall()
    conn.close()
    if participants:
        participant_names = [f'{row[0]} {row[1]}' if row[1] else row[0] for row in participants]
        bot.reply_to(call.message, '–¢–µ–∫—É—â–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:\n' + '\n'.join(participant_names) + ' üéÖ')
    else:
        bot.reply_to(call.message, '–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. üòû')

def clear_participants(call):
    user_id = call.from_user.id
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute('SELECT user_id FROM admins WHERE user_id = ?', (user_id,))
    admin = cursor.fetchone()
    if not admin:
        bot.reply_to(call.message, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. üö´')
        return

    cursor.execute('DELETE FROM participants')
    cursor.execute('DELETE FROM assignments')
    cursor.execute('UPDATE game_status SET status = "not_started"')
    conn.commit()
    conn.close()
    bot.reply_to(call.message, '–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—á–∏—â–µ–Ω. üóëÔ∏è')

def throw_snowball(call):
    user_id = call.from_user.id
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute('SELECT user_id, first_name, last_name FROM participants')
    participants = cursor.fetchall()
    conn.close()

    if participants:
        markup = InlineKeyboardMarkup()
        for participant in participants:
            target_user_id, first_name, last_name = participant
            if target_user_id != user_id:  # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                full_name = f'{first_name} {last_name}' if last_name else first_name
                markup.add(InlineKeyboardButton(full_name, callback_data=f'snowball_{target_user_id}'))
        bot.reply_to(call.message, '–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞, –≤ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∫–∏–Ω—É—Ç—å —Å–Ω–µ–∂–∫–æ–º:', reply_markup=markup)
    else:
        bot.reply_to(call.message, '–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. üòû')

def throw_snowball_to_user(call, target_user_id):
    user_id = call.from_user.id
    target_user_id = int(target_user_id)

    if user_id == target_user_id:
        bot.reply_to(call.message, '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫–∏–Ω—É—Ç—å —Å–Ω–µ–∂–∫–æ–º –≤ —Å–∞–º–æ–≥–æ —Å–µ–±—è. üòû')
        return

    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute('SELECT first_name, last_name FROM participants WHERE user_id = ?', (target_user_id,))
    target_user_name = cursor.fetchone()
    cursor.execute('SELECT COUNT(*) FROM participants')
    participant_count = cursor.fetchone()[0]
    conn.close()

    if target_user_name:
        target_full_name = f'{target_user_name[0]} {target_user_name[1]}' if target_user_name[1] else target_user_name[0]
    else:
        bot.reply_to(call.message, '–£—á–∞—Å—Ç–Ω–∏–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. üòû')
        return

    outcome = random.randint(1, 100)

    if outcome <= 50:
        # –ü–æ–ø–∞–ª –≤ —Ü–µ–ª—å
        bot.send_message(target_user_id, f'{call.from_user.first_name} –∫–∏–Ω—É–ª –≤ –≤–∞—Å —Å–Ω–µ–∂–∫–æ–º –∏ –ø–æ–ø–∞–ª! ‚ùÑÔ∏è')
        bot.reply_to(call.message, f'–í—ã –ø–æ–ø–∞–ª–∏ –≤ {target_full_name} —Å–Ω–µ–∂–∫–æ–º! ‚ùÑÔ∏è')
    elif outcome <= 80:
        # –ü—Ä–æ–º–∞–∑–∞–ª
        bot.reply_to(call.message, f'–í—ã –ø—Ä–æ–º–∞–∑–∞–ª–∏ –∏ –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ {target_full_name}. üéØ')
    else:
        # –ü–æ–ø–∞–ª –≤ –∫–æ–≥–æ-—Ç–æ –¥—Ä—É–≥–æ–≥–æ
        if participant_count > 2:
            conn = sqlite3.connect(DATABASE)
            cursor = conn.cursor()
            cursor.execute('SELECT user_id FROM participants WHERE user_id != ? AND user_id != ?', (user_id, target_user_id))
            other_participants = cursor.fetchall()
            conn.close()
            if other_participants:
                other_user_id = random.choice(other_participants)[0]
                bot.send_message(other_user_id, f'{call.from_user.first_name} –∫–∏–Ω—É–ª —Å–Ω–µ–∂–∫–æ–º –∏ –ø–æ–ø–∞–ª –≤ –≤–∞—Å! ‚ùÑÔ∏è')
                bot.reply_to(call.message, f'–í—ã –ø—Ä–æ–º–∞–∑–∞–ª–∏ –∏ –ø–æ–ø–∞–ª–∏ –≤ –∫–æ–≥–æ-—Ç–æ –¥—Ä—É–≥–æ–≥–æ! ‚ùÑÔ∏è')
            else:
                bot.reply_to(call.message, f'–í—ã –ø—Ä–æ–º–∞–∑–∞–ª–∏ –∏ –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ {target_full_name}. üéØ')
        else:
            bot.reply_to(call.message, f'–í—ã –ø—Ä–æ–º–∞–∑–∞–ª–∏ –∏ –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ {target_full_name}. üéØ')

def notify_all_participants(message_text):
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute('SELECT user_id FROM participants')
    participants = cursor.fetchall()
    conn.close()
    for participant in participants:
        user_id = participant[0]
        try:
            bot.send_message(user_id, message_text)
        except telebot.apihelper.ApiTelegramException as e:
            if e.result_json['error_code'] == 403:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}: {e.result_json['description']}")
            else:
                raise e

def change_wish(call):
    global game_started
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute('SELECT status FROM game_status')
    status = cursor.fetchone()[0]
    conn.close()
    if status == 'started':
        bot.reply_to(call.message, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ. üö´')
        return

    user_id = call.from_user.id
    bot.reply_to(call.message, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ (–ø–æ–¥–∞—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ):')
    user_states[user_id] = 'waiting_for_wish_change'

@bot.message_handler(func=lambda call: user_states.get(call.from_user.id) == 'waiting_for_wish_change')
def save_changed_wish(call):
    user_id = call.from_user.id
    wish = call.text
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute('UPDATE participants SET wish = ? WHERE user_id = ?', (wish, user_id))
    conn.commit()
    conn.close()
    bot.reply_to(call, '–í–∞—à–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ! üéÅ')
    user_states[user_id] = None

def show_profile(call):
    user_id = call.from_user.id
    print(f"User ID in show_profile: {user_id}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute('SELECT first_name, last_name, wish FROM participants WHERE user_id = ?', (user_id,))
    user_info = cursor.fetchone()
    conn.close()

    if user_info is None:
        bot.send_message(call.message.chat.id, '–í—ã –µ—â–µ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –∏–≥—Ä–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.')
        return

    first_name, last_name, wish = user_info
    full_name = f'{first_name} {last_name}' if last_name else first_name
    profile_text = f'–ò–º—è: {full_name}\n–ü–æ–∂–µ–ª–∞–Ω–∏–µ: {wish if wish else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"}'

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏–µ', callback_data='change_wish'))
    markup.add(InlineKeyboardButton('–ê–¥–º–∏–Ω', callback_data='admin'))

    bot.send_message(call.message.chat.id, profile_text, reply_markup=markup)

def generate_story(call):
    user_id = call.from_user.id
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute('SELECT first_name, last_name FROM participants')
    participants = cursor.fetchall()
    conn.close()

    if not participants:
        bot.reply_to(call.message, '–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏. üòû')
        return

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    selected_participants = random.sample(participants, random.randint(1, len(participants)))
    participant_names = [f'{row[0]} {row[1]}' if row[1] else row[0] for row in selected_participants]

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
    moods = ['–í–µ—Å–µ–ª–∞—è –∏—Å—Ç–æ—Ä–∏—è', '–°–º–µ—à–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è', '–ö—Ä–∏–Ω–∂–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è']
    mood = random.choice(moods)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ Mistral API
    prompt = (
        f"–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∏—Å–∞—Ç–µ–ª—å –∏—Å—Ç–æ—Ä–∏–π, —Ç—ã –ø–∏—à–µ—à—å –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏, –æ—á–µ–Ω—å –∫—Ä–∞—Å–∏–≤—ã–º —è–∑—ã–∫–æ–º, —Ç—ã –≤–ª–∞–¥–µ–µ—à—å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ–º —Ä–∞—Å—Å–∫–∞–∑–æ–≤ –∏ –∏—Å—Ç–æ—Ä–∏–π –≤ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–µ. "
        f"–¢–µ–±–µ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–π —Ä–∞—Å—Å–∫–∞–∑ —Å –∑–∞–∫–æ–Ω—á–µ–Ω–Ω–æ–π –∫–æ–Ω—Ü–æ–≤–∫–æ–π. –¢—ã –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å –º–Ω–µ —Ç–æ–ª—å–∫–æ –∏—Å—Ç–æ—Ä–∏–µ–π –∏ –Ω–∏—á–µ–º –±–æ–ª—å—à–µ, –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ –ø–∏—Å–∞—Ç—å –Ω–µ –Ω–∞–¥–æ, "
        f"–æ—Ç —Ç–µ–±—è —è –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –∏—Å—Ç–æ—Ä–∏—é. –ü—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–π—Å—è –Ω–∞ –ø–æ–ª —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –∏ –∏—Å–ø–æ–ª—å–∑—É–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–∫–ª–æ–Ω–µ–Ω–∏—è/—Å–ø—Ä—è–∂–µ–Ω–∏—è –∏ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è. "
        f"–ü—Ä–∏ –∫–∞–∂–¥–æ–º –º–æ–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–∏—à–∏ —Ä–∞–∑–Ω—ã–µ —Ä–∞—Å—Å–∫–∞–∑—ã, –æ–Ω–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ–≤—Ç–æ—Ä—è—Ç—Å—è. –¢–µ–º–∞: –ù–æ–≤—ã–π –≥–æ–¥, –Ω–æ–≤–æ–≥–æ–¥–Ω—è—è —Ç–µ–º–∞—Ç–∏–∫–∞, –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–µ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è. –£—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join(participant_names)}. –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Mistral API
    api_key = 'utxpKKoTJR5vVUs99Y1i5cnfS7eJ7IG5'
    model = "mistral-large-latest"
    client = Mistral(api_key=api_key)
    chat_response = client.chat.complete(
        model=model,
        messages=[
            {
                "role": "user",
                "content": prompt,
            },
        ]
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(call.message.chat.id, chat_response.choices[0].message.content)

if __name__ == '__main__':
    bot.polling()
