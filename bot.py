import telebot
import random
import string
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
from mistralai import Mistral
from database import Database as database
from config import BOT_TOKEN

bot = telebot.TeleBot(BOT_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
database.init_db()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
admin_states = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É üéÖüèª', callback_data='create_room'))
    markup.add(InlineKeyboardButton('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ üéÖüèª', callback_data='join_room'))
    markup.add(InlineKeyboardButton('–ú–æ–∏ –∫–æ–º–Ω–∞—Ç—ã üéÖüèª', callback_data='my_rooms'))
    bot.reply_to(message, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–æ–ª—à–µ–±–Ω—ã–π –º–∏—Ä "–¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—ã"! üéÑ‚ú®\n–ü—É—Å—Ç—å —ç—Ç–æ—Ç –ù–æ–≤—ã–π –ì–æ–¥ –±—É–¥–µ—Ç –ø–æ–ª–æ–Ω —Å—é—Ä–ø—Ä–∏–∑–æ–≤ –∏ —Ä–∞–¥–æ—Å—Ç–∏! üéÖüèªüéÅ', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    if call.data == 'create_room':
        create_room(call)
    elif call.data == 'join_room':
        join_room(call)
    elif call.data.startswith('leave_room_'):
        room_code = call.data.split('_')[-1]
        leave_room(call, room_code)
    elif call.data == 'my_rooms':
        show_my_rooms(call)
    elif call.data.startswith('show_room_info_'):
        room_code = call.data.split('_')[-1]
        show_room_info(call.message.chat.id, room_code)
    elif call.data.startswith('start_game_'):
        room_code = call.data.split('_')[-1]
        start_game(call.message.chat.id, room_code, call.from_user.id)
    elif call.data.startswith('change_wish_'):
        room_code = call.data.split('_')[-1]
        change_wish(call, room_code)
    elif call.data.startswith('throw_snowball_to_'):
        _, _, _, target_user_id, room_code = call.data.split('_')
        throw_snowball_to_user(call, int(target_user_id), room_code)
    elif call.data.startswith('throw_snowball_'):
        room_code = call.data.split('_')[-1]
        show_throw_snowball_options(call.message.chat.id, room_code)

def create_room(call):
    user_id = call.from_user.id
    user_states[user_id] = 'waiting_for_room_name'
    bot.send_message(call.message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã: üéÖüèª')

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == 'waiting_for_room_name')
def save_room_name(message):
    user_id = message.from_user.id
    room_name = message.text
    user_states[user_id] = {'room_name': room_name}
    bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã: üéÑ')
    user_states[user_id]['state'] = 'waiting_for_room_description'

@bot.message_handler(func=lambda message: isinstance(user_states.get(message.from_user.id), dict) and 'room_name' in user_states[message.from_user.id] and user_states[message.from_user.id]['state'] == 'waiting_for_room_description')
def save_room_description(message):
    user_id = message.from_user.id
    room_description = message.text
    user_states[user_id]['room_description'] = room_description
    bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –∏ –¥–∞—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: üìÖ')
    user_states[user_id]['state'] = 'waiting_for_room_location_and_date'

@bot.message_handler(func=lambda message: isinstance(user_states.get(message.from_user.id), dict) and 'room_name' in user_states[message.from_user.id] and user_states[message.from_user.id]['state'] == 'waiting_for_room_location_and_date')
def save_room_location_and_date(message):
    user_id = message.from_user.id
    room_location_and_date = message.text
    room_name = user_states[user_id]['room_name']
    room_description = user_states[user_id]['room_description']
    room_code = generate_room_code()

    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É
    database.create_room(room_code, room_name, room_location_and_date, room_description, user_id)

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–æ–º–Ω–∞—Ç—ã –≤ –∫–æ–º–Ω–∞—Ç—É
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    wish = ""  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏—è —Å–æ–∑–¥–∞—Ç–µ–ª—è @TODO

    database.add_participant(user_id, room_code, first_name, last_name, wish)

    user_states[user_id] = None
    bot.send_message(message.chat.id, f'–ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞! üéâ\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –≤–µ—Å–µ–ª—å—é! üéÖüèª')

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ
    show_room_info(message.chat.id, room_code)

def generate_room_code():
    return ''.join(random.choices(string.ascii_letters + string.digits, k=8))

def join_room(call):
    user_id = call.from_user.id
    user_states[user_id] = 'waiting_for_room_code'
    bot.send_message(call.message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã: üîë')

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == 'waiting_for_room_code')
def save_room_code(message):
    user_id = message.from_user.id
    room_code = message.text
    room = database.get_room(room_code)

    if room:
        if not database.is_user_in_room(user_id, room_code):
            if room[4] == 0:  # room[4] - status
                bot.send_message(message.chat.id, 'üéÅ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–≥–æ–¥–Ω–µ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ (–ø–æ–¥–∞—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ): üéÅ')
                user_states[user_id] = {'room_code': room_code, 'state': 'waiting_for_wish'}
            else:
                bot.send_message(message.chat.id, '–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ. üéÑ')
                user_states[user_id] = None
        else:
            bot.send_message(message.chat.id, '–í—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ. üéÖüèª')
            user_states[user_id] = None
    else:
        bot.send_message(message.chat.id, '–ö–æ–º–Ω–∞—Ç–∞ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üéÑ')
        user_states[user_id] = None

@bot.message_handler(func=lambda message: isinstance(user_states.get(message.from_user.id), dict) and 'room_code' in user_states[message.from_user.id] and user_states[message.from_user.id]['state'] == 'waiting_for_wish')
def save_wish(message):
    user_id = message.from_user.id
    wish = message.text
    room_code = user_states[user_id]['room_code']
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ñ–∞–º–∏–ª–∏–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_full_name = f'{first_name} {last_name}' if last_name else first_name

    # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç—É
    database.add_participant(user_id, room_code, first_name, last_name, wish)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–Ω–∞—Ç—ã –æ –Ω–æ–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ
    notify_participants(room_code, f'{user_full_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ! üéâ')

    user_states[user_id] = None
    bot.send_message(message.chat.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ! üéâ\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –≤–µ—Å–µ–ª—å—é! üéÖüèª')

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ
    show_room_info(message.chat.id, room_code)

def leave_room(call, room_code):
    user_id = call.from_user.id
    room = database.get_room(room_code)

    if room[4] == 1:
        bot.send_message(call.message.chat.id, '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–Ω–∞—Ç—É –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã! üéÑ')
        return

    if room:
        if room[5] == user_id:  # room[5] is the owner_id
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–Ω–∞—Ç—ã –æ —Ä–∞—Å–ø—É—Å–∫–µ –∫–æ–º–Ω–∞—Ç—ã
            notify_participants(room_code, '–ö–æ–º–Ω–∞—Ç–∞ —Ä–∞—Å–ø—É—â–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –≤–ª–∞–¥–µ–ª–µ—Ü –ø–æ–∫–∏–Ω—É–ª –µ—ë. üéÑ')

            # –£–¥–∞–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É –∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            database.delete_room(room_code)
        else:
            # –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
            database.remove_participant(user_id, room_code)

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–Ω–∞—Ç—ã –æ –≤—ã—Ö–æ–¥–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            user_full_name = f'{call.from_user.first_name} {call.from_user.last_name}' if call.from_user.last_name else call.from_user.first_name
            notify_participants(room_code, f'{user_full_name} –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É. üéÑ')

            bot.send_message(call.message.chat.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –∫–æ–º–Ω–∞—Ç—É. üéÑ')

        user_states[user_id] = None
    else:
        bot.send_message(call.message.chat.id, '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. üéÑ')

def show_my_rooms(call):
    user_id = call.from_user.id
    rooms = database.get_user_rooms(user_id)

    if rooms:
        markup = InlineKeyboardMarkup()
        for room in rooms:
            room_code = room[0]
            room_name = room[1]
            button = InlineKeyboardButton(f"–ö–æ–º–Ω–∞—Ç–∞ \"{room_name}\"", callback_data=f'show_room_info_{room_code}')
            markup.add(button)

        bot.send_message(call.message.chat.id, "–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–æ–º–Ω–∞—Ç–∞—Ö:", reply_markup=markup)
    else:
        bot.send_message(call.message.chat.id, "–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ. üéÑ")

def start_game(chat_id, room_code, user_id):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–æ–º–Ω–∞—Ç—ã.

    :param chat_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
    :param room_code: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–º–Ω–∞—Ç—ã
    :param user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    room = database.get_room(room_code)
    if room[4] == 1:  # room[4] - status
        bot.send_message(chat_id, "–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å! üéÑ")
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –≤ –∫–æ–º–Ω–∞—Ç–µ
    database.set_room_active(room_code)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–Ω–∞—Ç—ã
    participants = database.get_participants(room_code)
    participant_ids = [participant[0] for participant in participants]

    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    random.shuffle(participant_ids)

    # –ù–∞–∑–Ω–∞—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥—Ä—É–≥ –¥—Ä—É–≥—É
    assignments = []
    for i in range(len(participant_ids)):
        giver_id = participant_ids[i]
        receiver_id = participant_ids[(i + 1) % len(participant_ids)]  # –¶–∏–∫–ª–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
        assignments.append((giver_id, receiver_id, room_code))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    database.save_assignments(assignments)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã –∏ –∏—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è—Ö
    for giver_id, receiver_id, room_id in assignments:
        receiver = database.get_participant_by_id(receiver_id)
        receiver_full_name = f"{receiver[1]} {receiver[2]}" if receiver[2] else receiver[1]
        receiver_wish = database.get_wish(receiver_id, room_code)
        bot.send_message(giver_id, f"–ú–æ–∏ –æ–ª–µ–Ω–∏ –≤—ã–±—Ä–∞–ª–∏ –¥–ª—è —Ç–µ–±—è –∫–ª–∞—Å—Å–Ω–æ–≥–æ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ.\n–≠—Ç–æ __{receiver_full_name}__, –ø—Ä–∞–≤–¥–∞ –∑–¥–æ—Ä–æ–≤–æ?\nüòô –û–¥–Ω–∞–∂–¥—ã —ç—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫, —Å–∏–¥—è –Ω–∞ –º–æ–∏—Ö –∫–æ–ª–µ–Ω—è—Ö, —à–µ–ø–Ω—É–ª –º–Ω–µ –Ω–∞ —É—à–∫–æ, —á—Ç–æ —Ö–æ—á–µ—Ç:\n__{receiver_wish}__\n–ù–æ –≤—ã–±–æ—Ä, –∫–æ–Ω–µ—á–Ω–æ, –∑–∞ —Ç–æ–±–æ–π! üéâ")

    bot.send_message(chat_id, "–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ —Å–≤–æ–∏—Ö –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö. üéâ")

def change_wish(call, room_code):
    user_id = call.from_user.id
    room = database.get_room(room_code)

    if room[4] == 1:  # room[4] - status
        bot.send_message(call.message.chat.id, "–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å! üéÑ")
        return
    
    user_states[user_id] = {'room_code': room_code, 'state': 'waiting_for_new_wish'}
    bot.send_message(call.message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ: üéÅ')

@bot.message_handler(func=lambda message: isinstance(user_states.get(message.from_user.id), dict) and 'room_code' in user_states[message.from_user.id] and user_states[message.from_user.id]['state'] == 'waiting_for_new_wish')
def save_new_wish(message):
    user_id = message.from_user.id
    new_wish = message.text
    room_code = user_states[user_id]['room_code']

    # –û–±–Ω–æ–≤–ª—è–µ–º –∂–µ–ª–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    database.update_wish(user_id, room_code, new_wish)

    bot.send_message(message.chat.id, '–í–∞—à–µ –∂–µ–ª–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! üéâ')
    user_states[user_id] = None

    show_room_info(user_id, room_code)

def show_room_info(chat_id, room_code):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ.

    :param chat_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
    :param room_code: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–º–Ω–∞—Ç—ã
    """
    room = database.get_room(room_code)
    if room:
        participants = database.get_participants(room_code)
        participants_list = []
        for participant in participants:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ñ–∞–º–∏–ª–∏–∏ —É —É—á–∞—Å—Ç–Ω–∏–∫–∞
            user_full_name = f"{participant[1]} {participant[2]}" if participant[2] else participant[1]
            participants_list.append(user_full_name)
        participants_list_str = "\n".join(participants_list)

        # –ü–æ–ª—É—á–∞–µ–º –≤–∞—à–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        your_wish = database.get_wish(chat_id, room_code)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –∏–≥—Ä–∞
        is_game_active = room[4] == 1  # room[4] - status

        game_status_text = "üö´ –ò–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞" if not is_game_active else "‚úÖ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å"

        room_info = (
            f"{room[1]}\n\n"
            f"{game_status_text}\n\n"
            f"–ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã:\n"
            f"`{room[0]}`\n\n"
            f"üìÜ –ú–µ—Å—Ç–æ –∏ –≤—Ä–µ–º—è\n"
            f"{room[2]}\n\n"
            f"üîÜ –û–ø–∏—Å–∞–Ω–∏–µ\n"
            f"{room[3]}\n\n"
            f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n"
            f"{participants_list_str}\n\n"
            f"üéÅ –í–∞—à–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ:\n"
            f"{your_wish}"
        )

        if is_game_active:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–æ–ø–µ—á–Ω–æ–º –∏ –µ–≥–æ –∂–µ–ª–∞–Ω–∏–∏
            assignee = database.get_assignee(chat_id, room_code)
            if assignee:
                assignee_wish = database.get_wish(assignee[0], room_code)
                user_full_name = f"{assignee[1]} {assignee[2]}" if assignee[2] else assignee[1]
                room_info += (
                    f"\n\nüéÖüèª –í–∞—à –ø–æ–¥–æ–ø–µ—á–Ω—ã–π:\n"
                    f"__{user_full_name}__\n"
                    f"üéÅ –ï–≥–æ –ø–æ–∂–µ–ª–∞–Ω–∏–µ:\n"
                    f"__{assignee_wish}__"
                )

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        markup = InlineKeyboardMarkup()

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É" –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–æ–º–Ω–∞—Ç—ã
        if room[5] == chat_id and not is_game_active:  # room[5] - owner_id
            start_game_button = InlineKeyboardButton("üéÑ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É üéÑ", callback_data=f"start_game_{room_code}")
            markup.add(start_game_button)

        # –ö–Ω–æ–ø–∫–∞ "–ò–∑–º–µ–Ω–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ"
        if not is_game_active:
            change_wish_button = InlineKeyboardButton("‚ú® –ò–∑–º–µ–Ω–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ ‚ú®", callback_data=f"change_wish_{room_code}")
            markup.add(change_wish_button)

        # –ö–Ω–æ–ø–∫–∞ "–ö–∏–Ω—É—Ç—å —Å–Ω–µ–∂–æ–∫"
        throw_snowball_button = InlineKeyboardButton("‚ùÑÔ∏è –ö–∏–Ω—É—Ç—å —Å–Ω–µ–∂–æ–∫ ‚ùÑÔ∏è", callback_data=f"throw_snowball_{room_code}")
        markup.add(throw_snowball_button)

        # –ö–Ω–æ–ø–∫–∞ "–ü–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–Ω–∞—Ç—É"
        if not is_game_active:
            leave_room_button = InlineKeyboardButton("üö´ –ü–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–Ω–∞—Ç—É üö´", callback_data=f"leave_room_{room_code}")
            markup.add(leave_room_button)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        bot.send_message(chat_id, room_info, parse_mode='Markdown', reply_markup=markup)
    else:
        bot.send_message(chat_id, '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. üéÑ')

def show_throw_snowball_options(chat_id, room_code):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞, –≤ –∫–æ–≥–æ –∫–∏–Ω—É—Ç—å —Å–Ω–µ–∂–æ–∫.

    :param chat_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
    :param room_code: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–º–Ω–∞—Ç—ã
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–æ–º–Ω–∞—Ç–µ
    user_id = chat_id
    if not database.is_user_in_room(user_id, room_code):
        bot.send_message(chat_id, '–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ, —á—Ç–æ–±—ã –∫–∏–Ω—É—Ç—å —Å–Ω–µ–∂–æ–∫. ‚ùÑÔ∏è')
        return

    participants = database.get_participants(room_code)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥—Ä—É–≥–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ
    if len(participants) <= 1:
        bot.send_message(chat_id, '–í –∫–æ–º–Ω–∞—Ç–µ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –≤ –∫–æ–≥–æ –º–æ–∂–Ω–æ –∫–∏–Ω—É—Ç—å —Å–Ω–µ–∂–æ–∫. ‚ùÑÔ∏è')
        return

    markup = InlineKeyboardMarkup()

    for participant in participants:
        participant_id = participant[0]
        user_full_name = f"{participant[1]} {participant[2]}" if participant[2] else participant[1]
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if participant_id != user_id:
            button = InlineKeyboardButton(user_full_name, callback_data=f"throw_snowball_to_{participant_id}_{room_code}")
            markup.add(button)

    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞, –≤ –∫–æ–≥–æ –∫–∏–Ω—É—Ç—å —Å–Ω–µ–∂–æ–∫:", reply_markup=markup)

def throw_snowball_to_user(call, target_user_id, room_code):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ "–ö–∏–Ω—É—Ç—å —Å–Ω–µ–∂–æ–∫" –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.

    :param call: –û–±—ä–µ–∫—Ç –≤—ã–∑–æ–≤–∞
    :param target_user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param room_code: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–º–Ω–∞—Ç—ã
    """
    user_id = call.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–µ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    target_user_name = database.get_user_name(target_user_id)
    participant_count = database.get_participant_count(room_code)

    if target_user_name:
        target_full_name = f'{target_user_name[0]} {target_user_name[1]}' if target_user_name[1] else target_user_name[0]
    else:
        bot.reply_to(call.message, '–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. üòû')
        return

    outcome = random.randint(1, 100)

    if outcome <= 50:
        # –ü–æ–ø–∞–ª –≤ —Ü–µ–ª—å
        bot.send_message(target_user_id, f'{call.from_user.first_name} –∫–∏–Ω—É–ª –≤ –≤–∞—Å —Å–Ω–µ–∂–æ–∫ –∏ –ø–æ–ø–∞–ª! ‚ùÑÔ∏è')
        bot.reply_to(call.message, f'–í—ã –ø–æ–ø–∞–ª–∏ –≤ {target_full_name} —Å–Ω–µ–∂–∫–æ–º! ‚ùÑÔ∏è')
    elif outcome <= 80:
        # –ü—Ä–æ–º–∞–∑–∞–ª
        bot.reply_to(call.message, f'–í—ã –ø—Ä–æ–º–∞–∑–∞–ª–∏ –∏ –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ {target_full_name}. üéØ')
    else:
        # –ü–æ–ø–∞–ª –≤ –∫–æ–≥–æ-—Ç–æ –¥—Ä—É–≥–æ–≥–æ
        if participant_count > 2:
            other_participants = database.get_other_participants(user_id, target_user_id, room_code)
            if other_participants:
                other_user_id, other_first_name, other_last_name = random.choice(other_participants)
                other_user_name = f'{other_first_name} {other_last_name}' if other_last_name else other_first_name
                bot.send_message(other_user_id, f'{call.from_user.first_name} –∫–∏–Ω—É–ª —Å–Ω–µ–∂–æ–∫ –∏ –ø–æ–ø–∞–ª –≤ –≤–∞—Å! ‚ùÑÔ∏è')
                bot.reply_to(call.message, f'–í—ã –ø—Ä–æ–º–∞–∑–∞–ª–∏ –∏ –ø–æ–ø–∞–ª–∏ –≤ –∫–æ–≥–æ-—Ç–æ –¥—Ä—É–≥–æ–≥–æ! –≠—Ç–æ –±—ã–ª {other_user_name}! ‚ùÑÔ∏è')
            else:
                bot.reply_to(call.message, f'–í—ã –ø—Ä–æ–º–∞–∑–∞–ª–∏ –∏ –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ {target_full_name}. üéØ')
        else:
            bot.reply_to(call.message, f'–í—ã –ø—Ä–æ–º–∞–∑–∞–ª–∏ –∏ –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ {target_full_name}. üéØ')

def notify_participants(room_code, message_text):
    """
    –£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–Ω–∞—Ç—ã.

    :param room_code: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–º–Ω–∞—Ç—ã
    :param message_text: –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    """
    participants = database.get_participants(room_code)
    for participant in participants:
        participant_id = participant[0]
        bot.send_message(participant_id, message_text)

if __name__ == '__main__':
    bot.polling()