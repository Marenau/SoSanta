import telebot
import random
import string
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
from mistralai import Mistral
import database
from config import BOT_TOKEN, ADMIN_PASSWORD

bot = telebot.TeleBot(BOT_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
database.init_db()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
admin_states = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É üéÖüèª', callback_data='create_room'))
    markup.add(InlineKeyboardButton('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ üéÖüèª', callback_data='join_room'))
    bot.reply_to(message, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–æ–ª—à–µ–±–Ω—ã–π –º–∏—Ä "–¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—ã"! üéÑ‚ú®', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    if call.data == 'create_room':
        create_room(call)
    elif call.data == 'join_room':
        join_room(call)
    elif call.data == 'join':
        join(call)
    elif call.data == 'leave':
        leave(call)
    elif call.data == 'list':
        list_participants(call)
    elif call.data == 'admin':
        admin_login(call)
    elif call.data == 'snowball':
        throw_snowball(call)
    elif call.data.startswith('snowball_'):
        target_user_id = call.data.split('_')[1]
        throw_snowball_to_user(call, target_user_id)
    elif call.data.startswith('throw_back_'):
        target_user_id = call.data.split('_')[2]
        throw_snowball_to_user(call, target_user_id)
    elif call.data == 'change_wish':
        change_wish(call)
    elif call.data == 'start_game':
        start_game(call)
    elif call.data == 'clear':
        clear_participants(call)
    elif call.data == 'profile':
        show_profile(call)
    elif call.data == 'story':
        generate_story(call)
    elif call.data == 'manage_room':
        manage_room(call)
    elif call.data == 'delete_room':
        delete_room(call)
    elif call.data == 'view_participants':
        view_participants(call)
    elif call.data == 'start_room_game':
        start_room_game(call)

@bot.message_handler(func=lambda message: message.text.lower() == '–º–µ–Ω—é')
def handle_menu_command(message):
    show_menu(message)

def create_room(call):
    user_id = call.from_user.id
    user_states[user_id] = 'waiting_for_room_name'
    bot.send_message(call.message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã:')

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == 'waiting_for_room_name')
def save_room_name(message):
    user_id = message.from_user.id
    room_name = message.text
    user_states[user_id] = 'waiting_for_room_description'
    bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã:')
    user_states[user_id] = {'room_name': room_name}

@bot.message_handler(func=lambda message: isinstance(user_states.get(message.from_user.id), dict) and 'room_name' in user_states[message.from_user.id])
def save_room_description(message):
    user_id = message.from_user.id
    room_description = message.text
    room_name = user_states[user_id]['room_name']
    room_code = generate_room_code()

    database.add_room(room_code, room_name, room_description, user_id)

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–æ–º–Ω–∞—Ç—ã –≤ –∫–æ–º–Ω–∞—Ç—É
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    database.add_participant(user_id, room_code, first_name, last_name, None)

    user_states[user_id] = None
    bot.send_message(message.chat.id, f'–ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞!\n–ö–æ–¥: {room_code}\n–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {room_name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {room_description}')

def generate_room_code():
    return ''.join(random.choices(string.ascii_letters + string.digits, k=8))

def join_room(call):
    user_id = call.from_user.id
    user_states[user_id] = 'waiting_for_room_code'
    bot.send_message(call.message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã:')

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == 'waiting_for_room_code')
def save_room_code(message):
    user_id = message.from_user.id
    room_code = message.text
    room = database.get_room(room_code)

    if room:
        user_states[user_id] = 'waiting_for_wish'
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–≥–æ–¥–Ω–µ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ (–ø–æ–¥–∞—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ): üéÅ')
        user_states[user_id] = {'room_code': room_code}
    else:
        bot.send_message(message.chat.id, '–ö–æ–º–Ω–∞—Ç–∞ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        user_states[user_id] = None

@bot.message_handler(func=lambda message: isinstance(user_states.get(message.from_user.id), dict) and 'room_code' in user_states[message.from_user.id])
def save_wish(message):
    user_id = message.from_user.id
    room_code = user_states[user_id]['room_code']
    wish = message.text
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name

    database.add_participant(user_id, room_code, first_name, last_name, wish)

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(InlineKeyboardButton('–ú–µ–Ω—é'))
    bot.reply_to(message, '–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ "–¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞"! üéâ', reply_markup=markup)
    notify_all_participants(f'{message.from_user.first_name} {message.from_user.last_name if message.from_user.last_name else ""} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ! üéÖüèª')
    user_states[user_id] = None

    show_menu(message)

def leave(call):
    user_id = call.from_user.id
    user_info = database.get_participant(user_id)

    if user_info is None:
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ üéÖüèª', callback_data='join'))
        bot.send_message(call.message.chat.id, '–í—ã –µ—â–µ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –∏–≥—Ä–µ, —á—Ç–æ–±—ã –≤—Å—ë –∑–∞—Ä–∞–±–æ—Ç–∞–ª–æ.', reply_markup=markup)
        return

    database.delete_participant(user_id)
    bot.reply_to(call.message, '–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∏–≥—Ä—É "–¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞". üòû')

def admin_login(call):
    user_id = call.from_user.id
    user_info = database.get_participant(user_id)

    if user_info is None:
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ üéÖüèª', callback_data='join'))
        bot.send_message(call.message.chat.id, '–í—ã –µ—â–µ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –∏–≥—Ä–µ, —á—Ç–æ–±—ã –≤—Å—ë –∑–∞—Ä–∞–±–æ—Ç–∞–ª–æ.', reply_markup=markup)
        return

    user_id = call.from_user.id
    admin_states[user_id] = 'waiting_for_password'
    bot.reply_to(call.message, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: üîí')

@bot.message_handler(func=lambda call: admin_states.get(call.from_user.id) == 'waiting_for_password')
def check_admin_password(call):
    user_id = call.from_user.id
    if call.text == ADMIN_PASSWORD:
        admin_states[user_id] = 'admin_logged_in'
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton('–ù–∞—á–∞—Ç—å –∏–≥—Ä—É üéÖüèª', callback_data='start_game'))
        markup.add(InlineKeyboardButton('–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ üéÑ', callback_data='list'))
        markup.add(InlineKeyboardButton('–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ üóëÔ∏è', callback_data='clear'))
        markup.add(InlineKeyboardButton('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç–æ–π üè†', callback_data='manage_room'))
        bot.reply_to(call, '–í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. üëë', reply_markup=markup)
    else:
        admin_states[user_id] = None
        bot.reply_to(call, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. ‚ùå')

def manage_room(call):
    user_id = call.from_user.id
    room_id = database.get_room_id_by_user(user_id)

    if room_id is None:
        bot.send_message(call.message.chat.id, '–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–æ–º–Ω–∞—Ç—ã.')
        return

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ üéÑ', callback_data='view_participants'))
    markup.add(InlineKeyboardButton('–ù–∞—á–∞—Ç—å –∏–≥—Ä—É üéÖüèª', callback_data='start_room_game'))
    bot.send_message(call.message.chat.id, '–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç–æ–π:', reply_markup=markup)

def delete_room(call):
    user_id = call.from_user.id
    room_id = database.get_room_id_by_user(user_id)

    if room_id is None:
        bot.send_message(call.message.chat.id, '–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–æ–º–Ω–∞—Ç—ã.')
        return

    participants = database.get_participants_by_room(room_id)

    if participants and participants[0][0] == user_id:
        bot.send_message(call.message.chat.id, '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É, —Ç–∞–∫ –∫–∞–∫ —è–≤–ª—è–µ—Ç–µ—Å—å –µ—ë —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º.')
        return

    database.delete_room(room_id)
    bot.send_message(call.message.chat.id, '–ö–æ–º–Ω–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞. üóëÔ∏è')

def view_participants(call):
    user_id = call.from_user.id
    room_id = database.get_room_id_by_user(user_id)

    if room_id is None:
        bot.send_message(call.message.chat.id, '–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–æ–º–Ω–∞—Ç—ã.')
        return

    participants = database.get_participants_by_room(room_id)
    if participants:
        participant_names = [f'{row[0]} {row[1]}' if row[1] else row[0] for row in participants]
        bot.send_message(call.message.chat.id, '–¢–µ–∫—É—â–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:\n‚ú®\n' + '\n'.join(participant_names) + '\n‚ú®')
    else:
        bot.send_message(call.message.chat.id, '–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. üòû')

def start_room_game(call):
    user_id = call.from_user.id
    room_id = database.get_room_id_by_user(user_id)

    if room_id is None:
        bot.send_message(call.message.chat.id, '–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–æ–º–Ω–∞—Ç—ã.')
        return

    if not database.start_room_game(room_id):
        bot.send_message(call.message.chat.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã. üòï')
        return

    assignments = database.get_assignments(room_id)
    for giver, receiver in assignments:
        receiver_info = database.get_participant(receiver)
        if receiver_info:
            receiver_full_name = f'{receiver_info[0]} {receiver_info[1]}'
            wish = receiver_info[2] if receiver_info[2] else '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
            bot.send_message(giver, f'–í—ã –¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞ –¥–ª—è {receiver_full_name}! üéÖüèª\n–ü–æ–∂–µ–ª–∞–Ω–∏–µ: {wish}')

    bot.send_message(call.message.chat.id, '–ò–≥—Ä–∞ "–¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞" –Ω–∞—á–∞–ª–∞—Å—å! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–æ–º—É –≤—ã –¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞. üéÅ')

def list_participants(call):
    user_id = call.from_user.id
    user_info = database.get_participant(user_id)

    if user_info is None:
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ üéÖüèª', callback_data='join'))
        bot.send_message(call.message.chat.id, '–í—ã –µ—â–µ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –∏–≥—Ä–µ, —á—Ç–æ–±—ã –≤—Å—ë –∑–∞—Ä–∞–±–æ—Ç–∞–ª–æ.', reply_markup=markup)
        return

    participants = database.get_all_participants()
    if participants:
        participant_names = [f'{row[0]} {row[1]}' if row[1] else row[0] for row in participants]
        bot.reply_to(call.message, '–¢–µ–∫—É—â–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:\n‚ú®\n' + '\n'.join(participant_names) + '\n‚ú®')
    else:
        bot.reply_to(call.message, '–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. üòû')

def clear_participants(call):
    user_id = call.from_user.id
    user_info = database.get_participant(user_id)

    if user_info is None:
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ üéÖüèª', callback_data='join'))
        bot.send_message(call.message.chat.id, '–í—ã –µ—â–µ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –∏–≥—Ä–µ, —á—Ç–æ–±—ã –≤—Å—ë –∑–∞—Ä–∞–±–æ—Ç–∞–ª–æ.', reply_markup=markup)
        return

    database.clear_participants()
    bot.reply_to(call.message, '–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—á–∏—â–µ–Ω. üóëÔ∏è')

def throw_snowball(call):
    user_id = call.from_user.id
    user_info = database.get_participant(user_id)

    if user_info is None:
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ üéÖüèª', callback_data='join'))
        bot.send_message(call.message.chat.id, '–í—ã –µ—â–µ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –∏–≥—Ä–µ, —á—Ç–æ–±—ã –≤—Å—ë –∑–∞—Ä–∞–±–æ—Ç–∞–ª–æ.', reply_markup=markup)
        return

    participants = database.get_all_participants()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –¥—Ä—É–≥–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    other_participants = [participant for participant in participants if participant[0] != user_id]

    if other_participants:
        markup = InlineKeyboardMarkup()
        for participant in other_participants:
            target_user_id, first_name, last_name = participant
            full_name = f'{first_name} {last_name}' if last_name else first_name
            markup.add(InlineKeyboardButton(full_name, callback_data=f'snowball_{target_user_id}'))
        bot.reply_to(call.message, '–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞, –≤ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∫–∏–Ω—É—Ç—å —Å–Ω–µ–∂–æ–∫:', reply_markup=markup)
    else:
        bot.reply_to(call.message, '–ü–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. üòû')

def throw_snowball_to_user(call, target_user_id):
    user_id = call.from_user.id
    user_info = database.get_participant(user_id)

    if user_info is None:
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ üéÖüèª', callback_data='join'))
        bot.send_message(call.message.chat.id, '–í—ã –µ—â–µ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –∏–≥—Ä–µ, —á—Ç–æ–±—ã –≤—Å—ë –∑–∞—Ä–∞–±–æ—Ç–∞–ª–æ.', reply_markup=markup)
        return

    target_user_name = database.get_participant(target_user_id)
    participant_count = len(database.get_all_participants())

    if target_user_name:
        target_full_name = f'{target_user_name[0]} {target_user_name[1]}' if target_user_name[1] else target_user_name[0]
    else:
        bot.reply_to(call.message, '–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. üòû')
        return

    outcome = random.randint(1, 100)

    if outcome <= 50:
        # –ü–æ–ø–∞–ª –≤ —Ü–µ–ª—å
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton('–ö–∏–Ω—É—Ç—å –≤ –æ—Ç–≤–µ—Ç', callback_data=f'throw_back_{user_id}_{target_user_id}'))
        bot.send_message(target_user_id, f'{call.from_user.first_name} –∫–∏–Ω—É–ª –≤ –≤–∞—Å —Å–Ω–µ–∂–æ–∫ –∏ –ø–æ–ø–∞–ª! ‚ùÑÔ∏è', reply_markup=markup)
        bot.reply_to(call.message, f'–í—ã –ø–æ–ø–∞–ª–∏ –≤ {target_full_name} —Å–Ω–µ–∂–∫–æ–º! ‚ùÑÔ∏è')
    elif outcome <= 80:
        # –ü—Ä–æ–º–∞–∑–∞–ª
        bot.reply_to(call.message, f'–í—ã –ø—Ä–æ–º–∞–∑–∞–ª–∏ –∏ –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ {target_full_name}. üéØ')
    else:
        # –ü–æ–ø–∞–ª –≤ –∫–æ–≥–æ-—Ç–æ –¥—Ä—É–≥–æ–≥–æ
        if participant_count > 2:
            other_participants = [participant for participant in database.get_all_participants() if participant[0] != user_id and participant[0] != target_user_id]
            if other_participants:
                other_user_id, other_first_name, other_last_name = random.choice(other_participants)
                other_user_name = f'{other_first_name} {other_last_name}' if other_last_name else other_first_name
                bot.send_message(other_user_id, f'{call.from_user.first_name} –∫–∏–Ω—É–ª —Å–Ω–µ–∂–æ–∫ –∏ –ø–æ–ø–∞–ª –≤ –≤–∞—Å! ‚ùÑÔ∏è')
                bot.reply_to(call.message, f'–í—ã –ø—Ä–æ–º–∞–∑–∞–ª–∏ –∏ –ø–æ–ø–∞–ª–∏ –≤ –∫–æ–≥–æ-—Ç–æ –¥—Ä—É–≥–æ–≥–æ! –≠—Ç–æ –±—ã–ª {other_user_name}! ‚ùÑÔ∏è')
            else:
                bot.reply_to(call.message, f'–í—ã –ø—Ä–æ–º–∞–∑–∞–ª–∏ –∏ –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ {target_full_name}. üéØ')
        else:
            bot.reply_to(call.message, f'–í—ã –ø—Ä–æ–º–∞–∑–∞–ª–∏ –∏ –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ {target_full_name}. üéØ')

def notify_all_participants(message_text):
    participants = database.get_all_participants()
    for participant in participants:
        user_id = participant[0]
        try:
            bot.send_message(user_id, message_text)
        except telebot.apihelper.ApiTelegramException as e:
            if e.result_json['error_code'] == 403:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}: {e.result_json['description']}")
            else:
                raise e

def change_wish(call):
    global game_started

    user_id = call.from_user.id
    user_info = database.get_participant(user_id)

    if user_info is None:
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ üéÖüèª', callback_data='join'))
        bot.send_message(call.message.chat.id, '–í—ã –µ—â–µ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –∏–≥—Ä–µ, —á—Ç–æ–±—ã –≤—Å—ë –∑–∞—Ä–∞–±–æ—Ç–∞–ª–æ.', reply_markup=markup)
        return

    room_id = database.get_room_id_by_user(user_id)
    status = database.get_room_status(room_id)
    if status == 'started':
        bot.reply_to(call.message, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ. üö´')
        return

    user_id = call.from_user.id
    bot.reply_to(call.message, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ (–ø–æ–¥–∞—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ): üéÅ')
    user_states[user_id] = 'waiting_for_wish_change'

@bot.message_handler(func=lambda call: user_states.get(call.from_user.id) == 'waiting_for_wish_change')
def save_changed_wish(message):
    user_id = message.from_user.id
    wish = message.text
    database.update_participant_wish(user_id, wish)
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data='profile'))
    bot.send_message(message.chat.id, '–í–∞—à–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ! üéÅ', reply_markup=markup)
    user_states[user_id] = None

def show_profile(call):
    user_id = call.from_user.id
    user_info = database.get_participant(user_id)

    if user_info is None:
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ üéÖüèª', callback_data='join'))
        bot.send_message(call.message.chat.id, '–í—ã –µ—â–µ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –∏–≥—Ä–µ, —á—Ç–æ–±—ã –≤—Å—ë –∑–∞—Ä–∞–±–æ—Ç–∞–ª–æ.', reply_markup=markup)
        return

    first_name, last_name, wish = user_info
    full_name = f'{first_name} {last_name}' if last_name else first_name
    profile_text = f'–ò–º—è: {full_name}\n–ü–æ–∂–µ–ª–∞–Ω–∏–µ: {wish if wish else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"}'

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏–µ', callback_data='change_wish'))
    markup.add(InlineKeyboardButton('–ê–¥–º–∏–Ω', callback_data='admin'))

    bot.send_message(call.message.chat.id, profile_text, reply_markup=markup)

def generate_story(call):
    user_id = call.from_user.id
    user_info = database.get_participant(user_id)

    if user_info is None:
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ üéÖüèª', callback_data='join'))
        bot.send_message(call.message.chat.id, '–í—ã –µ—â–µ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –∏–≥—Ä–µ, —á—Ç–æ–±—ã –≤—Å—ë –∑–∞—Ä–∞–±–æ—Ç–∞–ª–æ.', reply_markup=markup)
        return

    participants = database.get_all_participants()

    if not participants:
        bot.reply_to(call.message, '–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏. üòû')
        return

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    selected_participants = random.sample(participants, random.randint(1, len(participants)))
    participant_names = [f'{row[0]} {row[1]}' if row[1] else row[0] for row in selected_participants]

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
    moods = ['–í–µ—Å–µ–ª–∞—è –∏—Å—Ç–æ—Ä–∏—è', '–°–º–µ—à–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è', '–ö—Ä–∏–Ω–∂–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è']
    mood = random.choice(moods)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ Mistral API
    prompt = (
        f"–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∏—Å–∞—Ç–µ–ª—å –∏—Å—Ç–æ—Ä–∏–π, —Ç—ã –ø–∏—à–µ—à—å –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏, –æ—á–µ–Ω—å –∫—Ä–∞—Å–∏–≤—ã–º —è–∑—ã–∫–æ–º, —Ç—ã –≤–ª–∞–¥–µ–µ—à—å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ–º —Ä–∞—Å—Å–∫–∞–∑–æ–≤ –∏ –∏—Å—Ç–æ—Ä–∏–π –≤ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–µ. "
        f"–¢–µ–±–µ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–π —Ä–∞—Å—Å–∫–∞–∑ —Å –∑–∞–∫–æ–Ω—á–µ–Ω–Ω–æ–π –∫–æ–Ω—Ü–æ–≤–∫–æ–π. –¢—ã –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å –º–Ω–µ —Ç–æ–ª—å–∫–æ –∏—Å—Ç–æ—Ä–∏–µ–π –∏ –Ω–∏—á–µ–º –±–æ–ª—å—à–µ, –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ –ø–∏—Å–∞—Ç—å –Ω–µ –Ω–∞–¥–æ, "
        f"–æ—Ç —Ç–µ–±—è —è –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –∏—Å—Ç–æ—Ä–∏—é. –ü—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–π—Å—è –Ω–∞ –ø–æ–ª —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –∏ –∏—Å–ø–æ–ª—å–∑—É–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–∫–ª–æ–Ω–µ–Ω–∏—è/—Å–ø—Ä—è–∂–µ–Ω–∏—è –∏ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è. "
        f"–ü—Ä–∏ –∫–∞–∂–¥–æ–º –º–æ–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–∏—à–∏ —Ä–∞–∑–Ω—ã–µ —Ä–∞—Å—Å–∫–∞–∑—ã, –æ–Ω–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è. –í –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥—Ç–µ–∫—Å—Ç–∞. –¢–µ–º–∞: –ù–æ–≤—ã–π –≥–æ–¥, –Ω–æ–≤–æ–≥–æ–¥–Ω—è—è —Ç–µ–º–∞—Ç–∏–∫–∞, –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–µ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è. –£—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join(participant_names)}. –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å
    bot.send_message(call.message.chat.id, '–≠–ª—å—Ñ—ã –°–∞–Ω—Ç—ã –æ—á–µ–Ω—å —Ç—Ä—É–¥—è—Ç—Å—è, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ä–∞—Å—Å–∫–∞–∑! üßùüèª\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Mistral API
    api_key = 'utxpKKoTJR5vVUs99Y1i5cnfS7eJ7IG5'
    model = "mistral-large-latest"
    client = Mistral(api_key=api_key)
    chat_response = client.chat.complete(
        model=model,
        messages=[
            {
                "role": "user",
                "content": prompt,
            },
        ]
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(call.message.chat.id, chat_response.choices[0].message.content)

def show_menu(message):
    user_id = message.from_user.id
    user_info = database.get_participant(user_id)

    if user_info is None:
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ', callback_data='join'))
        bot.send_message(message.chat.id, '–í—ã –µ—â–µ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –∏–≥—Ä–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π.', reply_markup=markup)
        return

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('–ü–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É üòû', callback_data='leave'))
    markup.add(InlineKeyboardButton('–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ üéÑ', callback_data='list'))
    markup.add(InlineKeyboardButton('–ö–∏–Ω—É—Ç—å —Å–Ω–µ–∂–æ–∫ ‚ùÑÔ∏è', callback_data='snowball'))
    markup.add(InlineKeyboardButton('–ù–æ–≤–æ–≥–æ–¥–Ω–∏–π —Ä–∞—Å—Å–∫–∞–∑ ‚òÉÔ∏è', callback_data='story'))
    markup.add(InlineKeyboardButton('–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å ü™™', callback_data='profile'))

    room_id = database.get_room_id_by_user(user_id)
    status = database.get_room_status(room_id)

    if status == '1':
        markup.add(InlineKeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é', callback_data='send_to_receiver'))
        markup.add(InlineKeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é', callback_data='send_to_giver'))
    else:
        bot.send_message(message.chat.id, '–ò–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å. –ü–æ–ª—É—á–∞—Ç–µ–ª—å –≤–∞—à–µ–≥–æ –ø–æ–¥–∞—Ä–∫–∞ –µ—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω.')

    bot.send_message(message.chat.id, '–ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π:', reply_markup=markup)

@bot.message_handler(func=lambda message: message.text.lower().startswith('/send_to_receiver '))
def handle_send_to_receiver(message):
    user_id = message.from_user.id
    user_info = database.get_participant(user_id)

    if user_info is None:
        bot.send_message(message.chat.id, '–í—ã –µ—â–µ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –∏–≥—Ä–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.')
        return

    room_id = database.get_room_id_by_user(user_id)
    status = database.get_room_status(room_id)

    if status != '1':
        bot.send_message(message.chat.id, '–ò–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å. –ü–æ–ª—É—á–∞—Ç–µ–ª—å –≤–∞—à–µ–≥–æ –ø–æ–¥–∞—Ä–∫–∞ –µ—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω.')
        return

    assignments = database.get_assignments(room_id)
    receiver_id = None
    for giver, receiver in assignments:
        if giver == user_id:
            receiver_id = receiver
            break

    if receiver_id is None:
        bot.send_message(message.chat.id, '–í—ã –µ—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –¢–∞–π–Ω—ã–º –°–∞–Ω—Ç–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.')
        return

    message_text = message.text[len('/send_to_receiver '):]
    if not message_text:
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /send_to_receiver.')
        return

    bot.send_message(receiver_id, f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–∞—à–µ–≥–æ –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—ã: {message_text}')
    bot.send_message(message.chat.id, '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')

@bot.message_handler(func=lambda message: message.text.lower().startswith('/send_to_giver '))
def handle_send_to_giver(message):
    user_id = message.from_user.id
    user_info = database.get_participant(user_id)

    if user_info is None:
        bot.send_message(message.chat.id, '–í—ã –µ—â–µ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –∏–≥—Ä–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.')
        return

    room_id = database.get_room_id_by_user(user_id)
    status = database.get_room_status(room_id)

    if status != '1':
        bot.send_message(message.chat.id, '–ò–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å. –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –≤–∞—à–µ–≥–æ –ø–æ–¥–∞—Ä–∫–∞ –µ—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω.')
        return

    assignments = database.get_assignments(room_id)
    giver_id = None
    for giver, receiver in assignments:
        if receiver == user_id:
            giver_id = giver
            break

    if giver_id is None:
        bot.send_message(message.chat.id, '–í—ã –µ—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –¢–∞–π–Ω—ã–º –°–∞–Ω—Ç–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.')
        return

    message_text = message.text[len('/send_to_giver '):]
    if not message_text:
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /send_to_giver.')
        return

    bot.send_message(giver_id, f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–∞—à–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {message_text}')
    bot.send_message(message.chat.id, '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')

if __name__ == '__main__':
    bot.polling()
